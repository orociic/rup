// Code generated by go-bindata.
// sources:
// config/repos.toml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configReposToml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x84\x93\xc1\x8a\xeb\x30\x0c\x45\xd7\xaf\x5f\x51\xba\x7e\x4c\xa0\xfb\xf9\x92\xa1\x0b\xc5\x16\x8e\xa9\x6c\x19\x59\x49\x93\xbf\x1f\x26\xb3\x48\xc1\x1a\x67\x7b\x74\x10\xce\xbd\x8a\xe7\x57\x26\x06\x7f\xfd\xbc\x7e\x5d\xfe\xdd\x02\x13\xe4\xf0\xc1\x12\x86\x75\x18\x31\xbb\x29\x81\x3c\xeb\xed\x7f\x33\x23\x0e\x06\x9d\x23\xf9\x16\x3b\xd9\x8a\x72\xcb\x3d\x8e\xb3\xb1\x05\x57\x48\x85\xd0\x1a\x94\x16\xc6\x04\xc1\x70\x13\x8f\xd1\xda\x91\x51\x5b\xc8\x30\xeb\x74\x6f\x79\x21\xd8\x82\xf0\x9c\x8d\x8f\x12\x5c\x22\xbe\x5a\x5e\x37\x23\x2e\x05\xb2\x52\x54\x5c\x8d\xd7\x28\x33\xfd\xc8\x8f\xcb\x25\xe6\xaa\x40\x64\xb5\xb3\x5b\x83\x4b\xfe\xb7\x27\x97\x8c\x6c\x0e\xc7\x01\x51\x10\x28\x53\x57\xe2\x05\xa5\x27\xf8\x78\xba\x03\x8d\x42\x8f\x69\x60\x8f\xeb\x89\xc0\xae\x2f\xc4\x54\x58\xd4\x4a\xf3\x4d\x4a\x4b\x79\x9e\xbc\x44\x30\x43\x32\x2e\xe4\xdd\xd1\xad\x74\x8d\x49\x13\xdd\x41\x34\x3a\xeb\xd6\x0e\x8f\x05\x4e\x8c\x22\x58\x31\xff\x75\x0d\xbb\x52\x2b\xf8\xb9\x5f\x73\x55\x89\x39\xf4\x4b\xd4\x58\x4e\x53\x5e\xf6\xbf\xe4\xf1\x1d\x00\x00\xff\xff\xa2\x78\xac\xf9\x1e\x04\x00\x00")

func configReposTomlBytes() ([]byte, error) {
	return bindataRead(
		_configReposToml,
		"config/repos.toml",
	)
}

func configReposToml() (*asset, error) {
	bytes, err := configReposTomlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/repos.toml", size: 1054, mode: os.FileMode(438), modTime: time.Unix(1473089005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/repos.toml": configReposToml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		"repos.toml": &bintree{configReposToml, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

